1. When would you want to use a remote repository rather than keeping all your work local?
--> Remote repositories are handy whenever you want to store your repo somewhere outside of your local machine, access it from another machine, and/or collaborate with another person and make those files accessible to them.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
—-> Pulling changes manually allows you more control over what is present in your local repo and in your files, so that your files don’t update with changes in the middle of editing and so that you can choose an appropriate time in your workflow to update changes.

3. Describe the differences between forks, clones, and branches. When would you want to use one instead of another?
—-> A branch copies commits from a repository into a separate stream of commits independent from the original from the point of split onwards. A clone copies a repository either from github to your own machine or from one local repo to another. A fork copies a repository and its commits through github into your own list of repositories with a link back to the original. You would fork rather than clone when you want to copy/change a repository when you don’t want to/don’t have permissions to change the original.

4. What is the benefit of having a copy of the last known state of the remote stored locally?
—-> If the last known state of the remote is stored locally, you can access it offline without having to query GitHub for it every time you want to view its commits up to that point.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
—-> Without Git or Github, collaboration for me personally would probably be done through shared Dropbox files or Google Drive. It would be easier because there isn’t such a steep learning curve as there is with Git and Github, especially with command-line Git, and your files would be saved automatically. However, Git and Github gives you much finer control over what you share and how you share it, regarding forks, branches, and the fine-tuned aspects of its manual version-control, and since it’s optimized for code, actually merging your collaborations with other people is either done automatically for you, or seeing what has changed is highlighted much more visibly.

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
—-> Making changes in a separate branch allows you to work on executing your code or feature without impacting the working functionality of master. It also allows you to submit pull requests to merge that branch into master, rather than directly changing master, which facilitates having other people provide feedback on and approve your branch before it gets integrating into the “safe” working master branch.
