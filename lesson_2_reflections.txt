1. What happens when you initialize a repository? Why do you need to do it?

—-> “git init” creates a .git file in the current directory, which tracks changes and history of the files you want git to track in the directory.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

—-> The staging area is middle ground between your working directory and the repository where you can parse out which files will be added to the repository in the next commit. This allows you to flexibility to structure your commits instead of adding all files at once.

3. How can you use the staging area to make sure you have one commit per logical change?

—-> You can structure what files changes are going to be included in each commit to ensure that the commit makes sense and there is only one commit per logical change instead of multiple disparate changes from committing all file changes at once.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

—-> Branches are useful in situations where you want to make changes but keep the master branch intact, like if you wanted to add an experimental feature. The branch keeps its own history of commits from the point of split. It’s convenient if you intend to stay on this ‘branch’ of your project for a while because you have a relevant name with which to refer to your master and your branch when switching, rather than being identified by long non-meaningful commit IDs.

5. How do the diagrams help you visualize the branch structure?

—-> I can see the points (commits) at which each branch branches off into its own line, and the lines that they follow from that point onwards.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

—-> Merging the two branches together combines the files in each branch and sets a commit at the point where those branches combine, with that commit being parented by the end of both branches (2 parents). In the graph the branches maintain their individual line of commits before combining because those commits still exist and are integrated into the history of the branch they are being merged into.

7. What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

—-> Automatic merging saves you a lot of time in terms of comparing multiple versions of a file and creating a combined file from them than if you had to do each process manually. However a machine conducts the evaluation and so it can’t make always judgement calls to resolve some conflicts in a way that makes sense.
